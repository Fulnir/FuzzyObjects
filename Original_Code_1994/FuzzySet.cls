Object  subclass: #FuzzySet  instanceVariableNames: 'eingangswert deFuzzyFlaeche laengeLFunktion laengeRFunktion deltaY deltaLY deltaRY setcolor setname xmin xmax linkemitte rechtemitte breitelinks breiterechts ymin ymax linkefunktion rechtefunktion'  classVariableNames: ''  poolDictionaries: '' !!FuzzySet class methods! !!FuzzySet methods!breitelinks: ainteger    "setzen der Breite der linken Setfunktion"    breitelinks := ainteger!breiterechts: ainteger    "setzen der Breite der rechten Setfunktion"    breiterechts := ainteger!deFuzzyFlaeche    "Antwortet mit der deFuzzyFlaeche."    ^deFuzzyFlaeche!deFuzzyFlaeche: aArray    "Setzt die deFuzzyFlaeche."    deFuzzyFlaeche := aArray!degree: anumber    "Berechnet die Zugehšrigkeit eines Wertes zur unscharfen Menge.    ----    Um den Grad der Zugehšrigkeit eines Wertes zu einer unscharfen Menge    zuberechnen, wird der Instance von FuzzySet die Nachricht degree: Wert    gesendet.    ZunŠchst wird der Wert so umgerechnet, da§ er am Anfang der rechten    oder linken Funktion zu Null wird. Dieser umgerechnete Wert wird jeweils    in myLnumber und myRnumber gespeichert."    | func myLnumber myRnumber|    myLnumber := (anumber - (linkemitte - breitelinks)).    myRnumber := (anumber - (rechtemitte )).    "Zuerst wird eine Fallunterscheidung durchgefŸhrt.    1.Frage: Reicht die maximale Zugehšrigkeit bis +Unendlich ?        Nein->dann                2.Frage:Reicht die maximale Zugehšrigkeit bis +Unendlich ?                    Ja-> dann                            weitere falluntersch. von linkemitte bis xmax.                    Nein->dann                            weitere falluntersch. fŸr ganzen Bereich.        ja->dann                weitere falluntersch. bis rechtemitte."  rechtemitte = xmax ifFalse: [    linkemitte = xmin        ifTrue: [anumber <= rechtemitte                    ifTrue: [^ymax].                (anumber > rechtemitte)&(anumber <= (rechtemitte + breiterechts))                    ifTrue: [deltaY := deltaRY.                            func := rechtefunktion value: myRnumber.                            func := func .                            ^func].                anumber > (rechtemitte + breiterechts)                    ifTrue: [^ymin].                ]        ifFalse: [anumber <= (linkemitte - breitelinks)                    ifTrue: [^ymin].                (anumber > (linkemitte - breitelinks))&(anumber <= linkemitte)                    ifTrue: [deltaY := deltaLY.                            func := linkefunktion value: myLnumber.                            func := func.                            ^func].                (anumber > linkemitte)&(anumber <= rechtemitte)                    ifTrue: [^ymax].                (anumber > rechtemitte)&(anumber <= (rechtemitte + breiterechts))                    ifTrue: [deltaY := deltaRY.                            func := rechtefunktion value: myRnumber.                            func := func.                            ^func].                anumber > (rechtemitte + breiterechts)                    ifTrue: [^ymin].                ]]    ifTrue: [anumber <= (linkemitte - breitelinks)                    ifTrue: [^ymin].                (anumber > (linkemitte - breitelinks))&(anumber <= linkemitte)                    ifTrue: [deltaY := deltaLY.                            func := linkefunktion value: myLnumber.                            func := func.                            ^func].                (anumber > linkemitte)&(anumber <= rechtemitte)                    ifTrue: [^ymax]            ].    ^1!display: tool    "zeigt das Fuzzyset grafisch an."    |deltaWert endeXAchse xLauf startpunkt muX wert colors xachse yachse xAusEcke yAusEcke stift farbe|    colors := #(blueColor                cyanColor                greenColor                yellowColor                redColor                magentaColor).    farbe := #blueColor.    xachse      := 350.    yachse      := 250.    xAusEcke    := 20.    yAusEcke    := 20.     stift :=tool. "    stift        place:  (xAusEcke@(yAusEcke+yachse-(ymin*yachse)));        goto:   ((xAusEcke+((linkemitte-breitelinks)))@(yAusEcke+yachse-(ymin*yachse)));        goto:   ((xAusEcke+(linkemitte))@(yAusEcke+yachse-(ymax*yachse)));        goto:   ((xAusEcke+(rechtemitte))@(yAusEcke+yachse-(ymax*yachse)));        goto:   ((xAusEcke+(rechtemitte+breiterechts))@(yAusEcke+yachse-(ymin*yachse)));        goto:   ((xAusEcke+xachse)@(yAusEcke+yachse-(ymin*yachse))). "    deltaWert := ((xmin abs) + (xmax abs)) / xachse.    endeXAchse := false.    xLauf := 0.    startpunkt := (xAusEcke@(yAusEcke+yachse-(ymin*yachse))).    stift place: startpunkt.    [endeXAchse = true]        whileFalse: [xLauf := xLauf + 1.                wert := (xLauf * deltaWert) + xmin.                muX := self degree: wert.                stift goto: ((xLauf + xAusEcke)@(yAusEcke + yachse - (muX * yachse) rounded)).                xLauf = xachse                    ifTrue: [endeXAchse := true].                ].      stift        place: (20@20);        goto: (20@270);        goto: (370@270).!displaySet: aTool    "Zeichnet das Set in aTool."    | toolX toolY lingUnit wert l r|    toolX:=470.    toolY:=90.    lingUnit:= ((self xmin abs) + (self xmax abs)) / toolX.    1 to: toolX do: [:x|         wert:=(self xmin) + (x * lingUnit) .        l:=self degree: wert.        l:=(l * toolY) rounded.        wert:=(self xmin) + ((x + 1) * lingUnit) .        r:=self degree: wert.        r:=(r * toolY) rounded.        aTool            foreColor: self setcolor;            strokeLineFrom: (x + 10)@(toolY - l) to: (x + 11)@(toolY - r)        ].        aTool            foreColor: Color blackColor;                            strokeLineFrom: 10@1 to: 10@toolY ;                        strokeLineFrom: 10@toolY to: (toolX + 10)@toolY!eingangswert    "comment"    ^eingangswert!eingangswert: aNumber    "comment"    eingangswert := aNumber!gerade    "berechnet die Zugehšrigkeit nach der Geradengleichung"    | muVonX |    ^muVonX!linkefunktion: aSymbol    "Setzen der linken Setfunktion.    -    Bei der Berechnung wird mit den der Funktion Ÿbergebenen Werten bei    Null begonnen. Diese Verschiebung ( siehe bei Degree: die Variablen    myLnumber und myRnumber) dient der automatischen Anpassung an ein    Einheitliches Aussehen der Funktionen.    -    "    |func |    "deltaY ist die Steigung pro ganzahligem x-Wert bei einer Geraden."    breitelinks = 0 ifTrue: [deltaLY := 0]        ifFalse: [deltaLY := (ymax - ymin) / (breitelinks)].    aSymbol = #gerade ifTrue: [func := [:wert |( wert  * deltaY ) + ymin ]].    aSymbol = #gerade2 ifTrue: [func := [:wert |( wert  * wert * deltaY) + ymin]].    aSymbol = #efunktion ifTrue: [func := [:wert |  2.718281 raisedTo: (( wert - (breitelinks)))]].    aSymbol = #efunktionscale10 ifTrue: [func := [:wert |  2.718281 raisedTo: (( wert - (breitelinks))*deltaY*10)]].    linkefunktion := func!linkemitte    "setzen der linken Setspitze"    ^linkemitte!linkemitte: ainteger    "setzen der linken Setspitze"    linkemitte := ainteger!rechtefunktion: aSymbol    "setzen der rechten Setfunktion. siehe auch linkefunktion:."    |func|    breiterechts = 0 ifTrue: [deltaRY = 0]        ifFalse: [deltaRY := (ymax - ymin) / (breiterechts)].    aSymbol = #gerade ifTrue: [func := [:wert |( wert * -1 * deltaY) + ymax]].    aSymbol = #gerade2 ifTrue: [func := [:wert |( wert  * wert * -1 * deltaY) + ymax]].    aSymbol = #efunktion ifTrue: [func := [:wert |  2.718281 raisedTo: ( ( wert ) * -1) - ymax]].    aSymbol = #efunktionscale10 ifTrue: [func := [:wert |  2.718281 raisedTo: (( wert * -1)*deltaY*10) - ymax]].    rechtefunktion := func!rechtemitte    "setzen der rechten Setspitze"    ^rechtemitte!rechtemitte: ainteger    "setzen der rechten Setspitze"    rechtemitte := ainteger!setcolor    "gibt die Setfarbe aus"    ^setcolor!setcolor: asymbol    "setzt die farbe des Sets"    setcolor := asymbol!setname    "liefert den Namen des Fuzysets"    ^setname!setname: astring    "setzt den Namen des fuzzysets"    setname := astring!xmax    "setzen der rechten Grenze des Wertebereichs"    ^xmax!xmax: ainteger    "setzen der rechten Grenze des Wertebereichs"    xmax := ainteger!xmin    "lesen der linken Grenze des Wertebereichs"    ^xmin!xmin: ainteger    "setzen der linken Grenze des Wertebereichs"    xmin := ainteger!ymax: ainteger    "setzen der maximalen Zugehšrigkeit"    ymax := ainteger!ymin: ainteger    "setzen der minimalsten Zugehšrigkeit"    ymin := ainteger! !
ApplicationDialog  subclass: #FuzzyLingVarDialog  instanceVariableNames: 'theFuzzyInterface givenInterface currentLingVar trapez mittig trapezSide mittigFaktor'  classVariableNames: ''  poolDictionaries: '' !!FuzzyLingVarDialog class methods!buildView: aView forModel: aModel    "Erzeugt das Dialogfenster fŸr die Erstellung einer Linguistischen Variabel."    | namePane setPane graphPane aBox aScroll |    aView        initialSize: 500@350;        backColor: (Color gray: 0.80).    aView addPane:        (StaticText new            contents:'Name';            layoutFrame:(10@10 extent: 200@20)).    aView addPane:        ((namePane:= EntryField new)            when: #needsContents send: #setNamePane: to: aModel with: namePane;            layoutFrame: (10@40 extent: 380@30);            border: (Border borderWidth: 1)).    aModel when: #needsName send: #contents to: namePane.    aView addPane:        (StaticText new            contents:'Sets';            layoutFrame:(10@80 extent: 380@20)).    aView addPane:        ((setPane:= TextPane new)            when: #needsContents send: #setSetPane: to: aModel with: setPane;            layoutFrame: (10@110 extent: 380@60);            border: (Border borderWidth: 1)).    aModel when: #needsSets send: #contents to: setPane.    aView addPane:        ((graphPane:= GraphPane new)            when: #display send: #redraw: to: aModel with: graphPane;            when: #button1Down: send: #mouseDown: to: aModel with: graphPane;            layoutFrame: (10@180 extent: 480@100);            border: (Border borderWidth: 1)).    aModel when: #redraw send: #invalidate to: graphPane.    aView addPane:        (StaticText new            contents:'Xmin';            layoutFrame:(10@290 extent: 50@20)).    aView addPane:        ((namePane:= EntryField new)            when: #needsContents send: #setXminPane: to: aModel with: namePane;            layoutFrame: (10@310 extent: 50@30);            border: (Border borderWidth: 1)).    aModel when: #needsXmin send: #contents to: namePane.    aView addPane:        (StaticText new            contents:'Xmax';            layoutFrame:(440@290 extent: 50@20)).    aView addPane:        ((namePane:= EntryField new)            when: #needsContents send: #setXmaxPane: to: aModel with: namePane;            layoutFrame: (440@310 extent: 50@30);            border: (Border borderWidth: 1)).    aModel when: #needsXmax send: #contents to: namePane.    aView addPane:        (Button new            label:'Erzeugen';            when: #clicked send: #pressedMake to: aModel;            layoutFrame: (410@10 extent: 80@20)).    aView addPane:        (Button new            label:'Fertig';            when: #clicked send: #pressedOk to: aModel;            layoutFrame: (410@40 extent: 80@20)).    aView addPane:        (Button new            label:'Abbruch';            when: #clicked send: #pressedCancel to: aModel;            layoutFrame: (410@70 extent: 80@20)).    aView addPane:        ((aBox:=CheckBox new)            label:'Trapez';            when: #clicked: send: #pressedTrapez: to: aModel with: aBox;            layoutFrame: (410@100 extent: 80@20)).    aView addPane:        ((aBox:=CheckBox new)            label:'Mittig';            when: #clicked: send: #pressedMittig: to: aModel with: aBox;            layoutFrame: (410@120 extent: 80@20))."    aView addPane:        (Button new            label:'Neuer Punkt';            when: #clicked send: #pressedMake to: aModel;            layoutFrame: (100@320 extent: 80@20))."!constructEventsTriggered    "Comment"    ^super constructEventsTriggered copy        add: #redraw;        add: #needsName;        add: #needsSets;        add: #needsXmin;        add: #needsXmax;            yourself!initialize    "Comment"    super initialize.    self initializeStrings!initializeStrings    "Comment"!openOn: aInterface with: aLing     "Comment"    | model |    model:= self new.    model initialState: aInterface with: aLing.    self open: model.    ^model! !!FuzzyLingVarDialog methods!initialState: aInterface    "Comment"    givenInterface:=aInterface.    currentLingVar:=''.    mittig:=false.    trapez:=false.    trapezSide:=4.    mittigFaktor:=3.    givenInterface isNil ifTrue:[givenInterface:=FuzzyInterface new].    theFuzzyInterface:=SharedValue on: givenInterface.!initialState: aInterface with: aLing    "Comment"    givenInterface:=aInterface.    currentLingVar:=aLing.    mittig:=false.    trapez:=false.    trapezSide:=4.    mittigFaktor:=3.    givenInterface isNil ifTrue:[givenInterface:=FuzzyInterface new].    theFuzzyInterface:=SharedValue on: givenInterface.!mouseDown: aPane    "Comment"    | temporaries |!needsName    "Comment"    self triggerEvent: #needsName!needsSets    "Comment"    self triggerEvent: #needSets!needsXmax    "Comment"    self triggerEvent: #needXmax!needsXmin    "Comment"    self triggerEvent: #needXmin!pressedCancel    "Comment"    self close!pressedMake    "Comment"    | fi ling theSets aSet count setColors lingWidth setSide mitte mUnit cUnit leftSide rigthSide leftDiff rigthDiff|    count:=1.    setColors:=OrderedCollection new.    setColors add: Color blueColor;        add: Color greenColor;        add: Color cyanColor;        add: Color redColor;        add: (Color red: 40000 green: 0.00 blue: 0.00);        add: (Color red: 0.00 green: 40000 blue: 0.00);        add: (Color red: 0.00 green: 0.00 blue: 40000);        add: (Color red: 40000 green: 10000 blue: 10000);        add: (Color red: 5000 green: 20000 blue: 30000);        add: (Color red: 30000 green: 0.00 blue: 30000);        add: (Color red: 25000 green: 55000 blue: 0.00);        add: (Color red: 4000 green: 15000 blue: 45000);        add: (Color red: 15000 green: 0.00 blue: 45000);        add: (Color red: 1000 green: 45000 blue: 45000);        add: (Color red: 45000 green: 0.00 blue: 15000).    ling:= FuzzyLinguistischeVariable new.    ling        varname: (self triggerEvent: #needsName) asString;        xmin: (Float fromString:   (self triggerEvent: #needsXmin)asString decimalSeparator: ',');        xmax: (Float fromString: (self triggerEvent: #needsXmax)asString decimalSeparator: ',').    theSets:=(self triggerEvent: #needsSets)asString asArrayOfSubstrings.    ling orderedSetNames: theSets.    lingWidth:=(ling xmin)abs + (ling xmax)abs.    cUnit:= (((theSets size) / 2 ) - ( 1 / 10))rounded.    mUnit:= lingWidth / ((cUnit * cUnit) * 2).    theSets size > 1 ifTrue:[        setSide:=lingWidth / ((theSets size) - 1).        leftSide:=setSide.rigthSide:=leftSide]    ifFalse:[setSide:=lingWidth / 2].    theSets do: [:aSetName|        mittig ifTrue:[            mitte:=(ling xmin + ((count - 1) * setSide)).            count <= (theSets size / 2) ifTrue:[rigthSide:=((cUnit - (count - 1)) * (cUnit - (count - 1)) * mUnit).                mitte:=ling xmin + ((lingWidth / 2) - rigthSide).            ]ifFalse:[leftSide:=((count - ((theSets size / 2)rounded)) * (count - ((theSets size / 2)rounded)) * mUnit).                mitte:=ling xmin + ((lingWidth / 2) + leftSide).            ].        ]ifFalse:[            mitte:=(ling xmin + ((count - 1) * setSide))        ].        aSet:=FuzzySet new.        aSet            setname:aSetName;            setcolor: (setColors at: count ifAbsent: [Color blueColor]);            xmin:ling xmin;            xmax:ling xmax;            linkemitte:[trapez ifTrue:[count = 1 ifFalse:[mitte - (setSide / trapezSide)]ifTrue:[mitte]]ifFalse:[mitte]]value;            rechtemitte:[trapez ifTrue:[count = (theSets size) ifFalse:[mitte + (setSide / trapezSide)]ifTrue:[mitte]]ifFalse:[mitte]]value;            breitelinks:[count = 1 ifTrue:[0]ifFalse:[trapez ifTrue: [leftSide - (leftSide / trapezSide)]ifFalse:[leftSide]]]value;            breiterechts:[count = (theSets size) ifTrue:[0]ifFalse:[trapez ifTrue: [rigthSide - (rigthSide / trapezSide)]ifFalse:[rigthSide]]]value;            ymin: 0;            ymax: 1.           " linkefunktion: #gerade."        ling neuesSet:aSet.        count:=count + 1.    ].     1 to: ((theSets size) - 1) do: [:aCount|        (ling set:(theSets at: aCount)) breiterechts: (            ((ling set:(theSets at: (aCount + 1))) rechtemitte) - ((ling set:(theSets at: aCount)) rechtemitte) -((((ling set:(theSets at: (aCount + 1))) rechtemitte)-((ling set:(theSets at: (aCount + 1))) linkemitte)) / 2)        )abs;rechtefunktion: #gerade.    ].    2 to: (theSets size) do: [:aCount|        (ling set:(theSets at: aCount)) breitelinks: (            ((ling set:(theSets at: aCount )) rechtemitte) - ((ling set:(theSets at: (aCount - 1))) rechtemitte) -((((ling set:(theSets at: aCount)) rechtemitte)-((ling set:(theSets at: aCount)) linkemitte)) / 2)        )abs;linkefunktion: #gerade.    ].    fi:=self theFuzzyInterface.    fi flaechengroesse: 101.    fi neueLingVar: ling.    self theFuzzyInterface: fi.    currentLingVar:=ling varname.    self triggerEvent: #redraw!pressedMittig: aPane    "Comment"    mittig:=mittig not.    aPane setValue: mittig.!pressedOk    "Comment"    givenInterface:=self theFuzzyInterface.    self close!pressedScrollTrapez: aScroll    "Comment"    trapezSide:=aScroll.!pressedTrapez: aPane    "Comment"    trapez:=trapez not.    aPane setValue: trapez.!redraw    "Comment"    self triggerEvent: #redraw!redraw: aPane    "Comment"    |tool aset asetlist avar|    tool := aPane graphicsTool.    tool connectWhile:[self redrawWith: tool].!redrawWith: aTool    "Comment"    |tool aset asetlist avar|     givenInterface lingvarliste isNil ifFalse:[        avar:=givenInterface lingvarliste at: currentLingVar ifAbsent:[].        avar isNil ifFalse:[            asetlist:=avar setliste.            asetlist keysDo:[:anset| aset := avar set: anset.                                aset displaySet: aTool]]].!setGraphPane: aPane    "Comment"    | temporaries |!setNamePane: aPane    "Comment"    aPane contents: currentLingVar!setSetPane: aPane    "Comment"    |avar |        givenInterface lingvarliste isNil ifFalse:[        avar:=givenInterface lingvarliste at: currentLingVar ifAbsent:[].        avar isNil ifFalse:[                aPane contents: (String fromSubstringArray: avar orderedSetNames  separatedBy: $ )        ]].!setXmaxPane: aPane    "Comment"    |avar|        givenInterface lingvarliste isNil ifFalse:[        avar:=givenInterface lingvarliste at: currentLingVar ifAbsent:[].        avar isNil ifFalse:[                aPane contents: (avar xmax asString)        ]].!setXminPane: aPane    "Comment"    |avar|        givenInterface lingvarliste isNil ifFalse:[        avar:=givenInterface lingvarliste at: currentLingVar ifAbsent:[].        avar isNil ifFalse:[                aPane contents: (avar xmin asString)        ]].!theFuzzyInterface    "Comment"    ^theFuzzyInterface value!theFuzzyInterface: aInterface    "Comment"    theFuzzyInterface setValue: aInterface!theFuzzyInterfaceHolder    "Comment"    ^theFuzzyInterface! !
FuzzyObjects                  name: #FuzzySet           superclass: Environment@#Object           properties: 0x1000             category: #'Kernel-Object'   classVariableNames: nilinstanceVariableNames: {'eingangswert'. 'deFuzzyFlaeche'. 'laengeLFunktion'. 'laengeRFunktion'. 'deltaY'. 'deltaLY'. 'deltaRY'. 'setcolor'. 'setname'. 'xmin'. 'xmax'. 'linkemitte'. 'rechtemitte'. 'breitelinks'. 'breiterechts'. 'ymin'. 'ymax'. 'linkefunktion'. 'rechtefunktion'}  sharedVariableNames: nil           namespaces: nil   structureTemplates: nil   defaultStorageSize: 0!FuzzyObjects@#FuzzySet compileMethodSource: ('breitelinks: ainteger    "setzen der Breite der linken Setfunktion"    breitelinks := ainteger')!(FuzzyObjects@#FuzzySet instanceMethodFor: #breitelinks:) protocolCategory: 'setter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #breitelinks:) description: ('setzen der Breite der linken Setfunktion').!FuzzyObjects@#FuzzySet compileMethodSource: ('breiterechts: ainteger    "setzen der Breite der rechten Setfunktion"    breiterechts := ainteger')!(FuzzyObjects@#FuzzySet instanceMethodFor: #breiterechts:) protocolCategory: 'setter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #breiterechts:) description: ('setzen der Breite der rechten Setfunktion').!FuzzyObjects@#FuzzySet compileMethodSource: ('deFuzzyFlaeche    "Antwortet mit der deFuzzyFlaeche."    ^deFuzzyFlaeche')!(FuzzyObjects@#FuzzySet instanceMethodFor: #deFuzzyFlaeche) protocolCategory: 'getter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #deFuzzyFlaeche) description: ('Antwortet mit der deFuzzyFlaeche.').!FuzzyObjects@#FuzzySet compileMethodSource: ('deFuzzyFlaeche: aArray    "Setzt die deFuzzyFlaeche."    deFuzzyFlaeche := aArray')!(FuzzyObjects@#FuzzySet instanceMethodFor: #deFuzzyFlaeche:) protocolCategory: 'setter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #deFuzzyFlaeche:) description: ('Setzt die deFuzzyFlaeche.').!FuzzyObjects@#FuzzySet compileMethodSource: ('degree: anumber    "Berechnet die Zugehšrigkeit eines Wertes zur unscharfen Menge.    ----    Um den Grad der Zugehšrigkeit eines Wertes zu einer unscharfen Menge    zuberechnen, wird der Instance von FuzzySet die Nachricht degree: Wert    gesendet.    ZunŠchst wird der Wert so umgerechnet, da§ er am Anfang der rechten    oder linken Funktion zu Null wird. Dieser umgerechnete Wert wird jeweils    in myLnumber und myRnumber gespeichert."    | func myLnumber myRnumber|    myLnumber := (anumber - (linkemitte - breitelinks)).    myRnumber := (anumber - (rechtemitte )).    "Zuerst wird eine Fallunterscheidung durchgefŸhrt.    1.Frage: Reicht die maximale Zugehšrigkeit bis +Unendlich ?        Nein->dann                2.Frage:Reicht die maximale Zugehšrigkeit bis +Unendlich ?                    Ja-> dann                            weitere falluntersch. von linkemitte bis xmax.                    Nein->dann                            weitere falluntersch. fŸr ganzen Bereich.        ja->dann                weitere falluntersch. bis rechtemitte."  rechtemitte = xmax ifFalse: [    linkemitte = xmin        ifTrue: [anumber <= rechtemitte                    ifTrue: [^ymax].                (anumber > rechtemitte)&(anumber <= (rechtemitte + breiterechts))                    ifTrue: [deltaY := deltaRY.                            func := rechtefunktion value: myRnumber.                            func := func .                            ^func].                anumber > (rechtemitte + breiterechts)                    ifTrue: [^ymin].                ]        ifFalse: [anumber <= (linkemitte - breitelinks)                    ifTrue: [^ymin].                (anumber > (linkemitte - breitelinks))&(anumber <= linkemitte)                    ifTrue: [deltaY := deltaLY.                            func := linkefunktion value: myLnumber.                            func := func.                            ^func].                (anumber > linkemitte)&(anumber <= rechtemitte)                    ifTrue: [^ymax].                (anumber > rechtemitte)&(anumber <= (rechtemitte + breiterechts))                    ifTrue: [deltaY := deltaRY.                            func := rechtefunktion value: myRnumber.                            func := func.                            ^func].                anumber > (rechtemitte + breiterechts)                    ifTrue: [^ymin].                ]]    ifTrue: [anumber <= (linkemitte - breitelinks)                    ifTrue: [^ymin].                (anumber > (linkemitte - breitelinks))&(anumber <= linkemitte)                    ifTrue: [deltaY := deltaLY.                            func := linkefunktion value: myLnumber.                            func := func.                            ^func].                (anumber > linkemitte)&(anumber <= rechtemitte)                    ifTrue: [^ymax]            ].    ^1')!(FuzzyObjects@#FuzzySet instanceMethodFor: #degree:) protocolCategory: '* Uncategorized *'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #degree:) description: ('Berechnet die Zugehšrigkeit eines Wertes zur unscharfen Menge. ---- Um den Grad der Zugehšrigkeit eines Wertes zu einer unscharfen Menge zuberechnen, wird der Instance von FuzzySet die Nachricht degree: Wert gesendet. ZunŠchst wird der Wert so umgerechnet, da§ er am Anfang der rechten oder linken Funktion zu Null wird. Dieser umgerechnete Wert wird jeweils in myLnumber und myRnumber gespeichert.').!FuzzyObjects@#FuzzySet compileMethodSource: ('display: tool    "zeigt das Fuzzyset grafisch an."    |deltaWert endeXAchse xLauf startpunkt muX wert colors xachse yachse xAusEcke yAusEcke stift farbe|    colors := #(blueColor                cyanColor                greenColor                yellowColor                redColor                magentaColor).    farbe := #blueColor.    xachse      := 350.    yachse      := 250.    xAusEcke    := 20.    yAusEcke    := 20.     stift :=tool. "    stift        place:  (xAusEcke@(yAusEcke+yachse-(ymin*yachse)));        goto:   ((xAusEcke+((linkemitte-breitelinks)))@(yAusEcke+yachse-(ymin*yachse)));        goto:   ((xAusEcke+(linkemitte))@(yAusEcke+yachse-(ymax*yachse)));        goto:   ((xAusEcke+(rechtemitte))@(yAusEcke+yachse-(ymax*yachse)));        goto:   ((xAusEcke+(rechtemitte+breiterechts))@(yAusEcke+yachse-(ymin*yachse)));        goto:   ((xAusEcke+xachse)@(yAusEcke+yachse-(ymin*yachse))). "    deltaWert := ((xmin abs) + (xmax abs)) / xachse.    endeXAchse := false.    xLauf := 0.    startpunkt := (xAusEcke@(yAusEcke+yachse-(ymin*yachse))).    stift place: startpunkt.    [endeXAchse = true]        whileFalse: [xLauf := xLauf + 1.                wert := (xLauf * deltaWert) + xmin.                muX := self degree: wert.                stift goto: ((xLauf + xAusEcke)@(yAusEcke + yachse - (muX * yachse) rounded)).                xLauf = xachse                    ifTrue: [endeXAchse := true].                ].      stift        place: (20@20);        goto: (20@270);        goto: (370@270).')!(FuzzyObjects@#FuzzySet instanceMethodFor: #display:) protocolCategory: '* Uncategorized *'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #display:) description: ('zeigt das Fuzzyset grafisch an.').!FuzzyObjects@#FuzzySet compileMethodSource: ('displaySet: aTool    "Zeichnet das Set in aTool."    | toolX toolY lingUnit wert l r|    toolX:=470.    toolY:=90.    lingUnit:= ((self xmin abs) + (self xmax abs)) / toolX.    1 to: toolX do: [:x|         wert:=(self xmin) + (x * lingUnit) .        l:=self degree: wert.        l:=(l * toolY) rounded.        wert:=(self xmin) + ((x + 1) * lingUnit) .        r:=self degree: wert.        r:=(r * toolY) rounded.        aTool            foreColor: self setcolor;            strokeLineFrom: (x + 10)@(toolY - l) to: (x + 11)@(toolY - r)        ].        aTool            foreColor: Color blackColor;                            strokeLineFrom: 10@1 to: 10@toolY ;                        strokeLineFrom: 10@toolY to: (toolX + 10)@toolY')!(FuzzyObjects@#FuzzySet instanceMethodFor: #displaySet:) protocolCategory: '* Uncategorized *'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #displaySet:) description: ('Zeichnet das Set in aTool.').!FuzzyObjects@#FuzzySet compileMethodSource: ('eingangswert    "comment"    ^eingangswert')!(FuzzyObjects@#FuzzySet instanceMethodFor: #eingangswert) protocolCategory: 'getter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #eingangswert) description: ('comment').!FuzzyObjects@#FuzzySet compileMethodSource: ('eingangswert: aNumber    "comment"    eingangswert := aNumber')!(FuzzyObjects@#FuzzySet instanceMethodFor: #eingangswert:) protocolCategory: 'setter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #eingangswert:) description: ('comment').!FuzzyObjects@#FuzzySet compileMethodSource: ('gerade    "berechnet die Zugehšrigkeit nach der Geradengleichung"    | muVonX |    ^muVonX')!(FuzzyObjects@#FuzzySet instanceMethodFor: #gerade) protocolCategory: '* Uncategorized *'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #gerade) description: ('berechnet die Zugehšrigkeit nach der Geradengleichung').!FuzzyObjects@#FuzzySet compileMethodSource: ('linkefunktion: aSymbol    "Setzen der linken Setfunktion.    -    Bei der Berechnung wird mit den der Funktion Ÿbergebenen Werten bei    Null begonnen. Diese Verschiebung ( siehe bei Degree: die Variablen    myLnumber und myRnumber) dient der automatischen Anpassung an ein    Einheitliches Aussehen der Funktionen.    -    "    |func |    "deltaY ist die Steigung pro ganzahligem x-Wert bei einer Geraden."    breitelinks = 0 ifTrue: [deltaLY := 0]        ifFalse: [deltaLY := (ymax - ymin) / (breitelinks)].    aSymbol = #gerade ifTrue: [func := [:wert |( wert  * deltaY ) + ymin ]].    aSymbol = #gerade2 ifTrue: [func := [:wert |( wert  * wert * deltaY) + ymin]].    aSymbol = #efunktion ifTrue: [func := [:wert |  2.718281 raisedTo: (( wert - (breitelinks)))]].    aSymbol = #efunktionscale10 ifTrue: [func := [:wert |  2.718281 raisedTo: (( wert - (breitelinks))*deltaY*10)]].    linkefunktion := func')!(FuzzyObjects@#FuzzySet instanceMethodFor: #linkefunktion:) protocolCategory: '* Uncategorized *'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #linkefunktion:) description: ('Setzen der linken Setfunktion. - Bei der Berechnung wird mit den der Funktion Ÿbergebenen Werten bei Null begonnen. Diese Verschiebung ( siehe bei Degree: die Variablen myLnumber und myRnumber) dient der automatischen Anpassung an ein Einheitliches Aussehen der Funktionen. -').!FuzzyObjects@#FuzzySet compileMethodSource: ('linkemitte    "setzen der linken Setspitze"    ^linkemitte')!(FuzzyObjects@#FuzzySet instanceMethodFor: #linkemitte) protocolCategory: 'getter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #linkemitte) description: ('setzen der linken Setspitze').!FuzzyObjects@#FuzzySet compileMethodSource: ('linkemitte: ainteger    "setzen der linken Setspitze"    linkemitte := ainteger')!(FuzzyObjects@#FuzzySet instanceMethodFor: #linkemitte:) protocolCategory: 'setter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #linkemitte:) description: ('setzen der linken Setspitze').!FuzzyObjects@#FuzzySet compileMethodSource: ('rechtefunktion: aSymbol    "setzen der rechten Setfunktion. siehe auch linkefunktion:."    |func|    breiterechts = 0 ifTrue: [deltaRY = 0]        ifFalse: [deltaRY := (ymax - ymin) / (breiterechts)].    aSymbol = #gerade ifTrue: [func := [:wert |( wert * -1 * deltaY) + ymax]].    aSymbol = #gerade2 ifTrue: [func := [:wert |( wert  * wert * -1 * deltaY) + ymax]].    aSymbol = #efunktion ifTrue: [func := [:wert |  2.718281 raisedTo: ( ( wert ) * -1) - ymax]].    aSymbol = #efunktionscale10 ifTrue: [func := [:wert |  2.718281 raisedTo: (( wert * -1)*deltaY*10) - ymax]].    rechtefunktion := func')!(FuzzyObjects@#FuzzySet instanceMethodFor: #rechtefunktion:) protocolCategory: '* Uncategorized *'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #rechtefunktion:) description: ('setzen der rechten Setfunktion. siehe auch linkefunktion:.').!FuzzyObjects@#FuzzySet compileMethodSource: ('rechtemitte    "setzen der rechten Setspitze"    ^rechtemitte')!(FuzzyObjects@#FuzzySet instanceMethodFor: #rechtemitte) protocolCategory: 'getter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #rechtemitte) description: ('setzen der rechten Setspitze').!FuzzyObjects@#FuzzySet compileMethodSource: ('rechtemitte: ainteger    "setzen der rechten Setspitze"    rechtemitte := ainteger')!(FuzzyObjects@#FuzzySet instanceMethodFor: #rechtemitte:) protocolCategory: 'setter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #rechtemitte:) description: ('setzen der rechten Setspitze').!FuzzyObjects@#FuzzySet compileMethodSource: ('setcolor    "gibt die Setfarbe aus"    ^setcolor')!(FuzzyObjects@#FuzzySet instanceMethodFor: #setcolor) protocolCategory: 'getter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #setcolor) description: ('gibt die Setfarbe aus').!FuzzyObjects@#FuzzySet compileMethodSource: ('setcolor: asymbol    "setzt die farbe des Sets"    setcolor := asymbol')!(FuzzyObjects@#FuzzySet instanceMethodFor: #setcolor:) protocolCategory: 'setter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #setcolor:) description: ('setzt die farbe des Sets').!FuzzyObjects@#FuzzySet compileMethodSource: ('setname    "liefert den Namen des Fuzysets"    ^setname')!(FuzzyObjects@#FuzzySet instanceMethodFor: #setname) protocolCategory: 'getter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #setname) description: ('liefert den Namen des Fuzysets').!FuzzyObjects@#FuzzySet compileMethodSource: ('setname: astring    "setzt den Namen des fuzzysets"    setname := astring')!(FuzzyObjects@#FuzzySet instanceMethodFor: #setname:) protocolCategory: 'setter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #setname:) description: ('setzt den Namen des fuzzysets').!FuzzyObjects@#FuzzySet compileMethodSource: ('xmax    "setzen der rechten Grenze des Wertebereichs"    ^xmax')!(FuzzyObjects@#FuzzySet instanceMethodFor: #xmax) protocolCategory: 'getter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #xmax) description: ('setzen der rechten Grenze des Wertebereichs').!FuzzyObjects@#FuzzySet compileMethodSource: ('xmax: ainteger    "setzen der rechten Grenze des Wertebereichs"    xmax := ainteger')!(FuzzyObjects@#FuzzySet instanceMethodFor: #xmax:) protocolCategory: 'setter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #xmax:) description: ('setzen der rechten Grenze des Wertebereichs').!FuzzyObjects@#FuzzySet compileMethodSource: ('xmin    "lesen der linken Grenze des Wertebereichs"    ^xmin')!(FuzzyObjects@#FuzzySet instanceMethodFor: #xmin) protocolCategory: 'getter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #xmin) description: ('lesen der linken Grenze des Wertebereichs').!FuzzyObjects@#FuzzySet compileMethodSource: ('xmin: ainteger    "setzen der linken Grenze des Wertebereichs"    xmin := ainteger')!(FuzzyObjects@#FuzzySet instanceMethodFor: #xmin:) protocolCategory: 'setter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #xmin:) description: ('setzen der linken Grenze des Wertebereichs').!FuzzyObjects@#FuzzySet compileMethodSource: ('ymax: ainteger    "setzen der maximalen Zugehšrigkeit"    ymax := ainteger')!(FuzzyObjects@#FuzzySet instanceMethodFor: #ymax:) protocolCategory: 'setter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #ymax:) description: ('setzen der maximalen Zugehšrigkeit').!FuzzyObjects@#FuzzySet compileMethodSource: ('ymin: ainteger    "setzen der minimalsten Zugehšrigkeit"    ymin := ainteger')!(FuzzyObjects@#FuzzySet instanceMethodFor: #ymin:) protocolCategory: 'setter'.!(FuzzyObjects@#FuzzySet instanceMethodFor: #ymin:) description: ('setzen der minimalsten Zugehšrigkeit').!